"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDestination = void 0;
const origins_1 = require("../../origins");
const removeLeadingSlash = (destination) => {
    return destination.startsWith('/') ? destination.substring(1) : destination;
};
const removeOptionalPart = (destination) => {
    const optionalPartToMatch = ':optionalSlash:optionalQuery';
    return new RegExp(optionalPartToMatch + '$').test(destination)
        ? destination.substring(0, destination.length - optionalPartToMatch.length)
        : destination;
};
/**
 * Extracts the destination from a ruleset, it assuming that the rule is a url_rewrite rule
 * and that it uses only one "if" statement, where second element is the features object that
 * contains the url_rewrite array. Once this assumption is true, it will return the object
 * with destination and pernament info about origin
 */
const extractDestination = (r) => {
    var _a, _b, _c, _d;
    const ifParts = r.if;
    const features = ifParts[1];
    const originName = (_a = features === null || features === void 0 ? void 0 : features.origin) === null || _a === void 0 ? void 0 : _a.set_origin;
    let destinations = [];
    if (originName !== origins_1.STATIC_ORIGIN_NAME && originName !== origins_1.PERMANENT_STATIC_ORIGIN_NAME)
        return [];
    const rewriteDestinations = (_d = (_c = (_b = features.url) === null || _b === void 0 ? void 0 : _b.url_rewrite) === null || _c === void 0 ? void 0 : _c.flatMap(p => p.destination).filter(p => p !== undefined)) !== null && _d !== void 0 ? _d : [];
    rewriteDestinations.forEach(destination => destinations.push({
        destination: removeLeadingSlash(removeOptionalPart(destination)),
        permanent: originName === origins_1.PERMANENT_STATIC_ORIGIN_NAME,
    }));
    return destinations;
};
exports.extractDestination = extractDestination;
