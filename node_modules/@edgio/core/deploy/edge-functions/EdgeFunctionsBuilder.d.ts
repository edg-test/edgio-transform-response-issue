/// <reference types="node" />
import { Rules } from '../../types';
export interface FunctionEntry {
    name: string;
    code: string;
}
/**
 * The abstract base class for edge function builders.
 */
export default abstract class EdgeFunctionsBuilder {
    protected functionDefaultExportName: string;
    protected indexCodeTemplateFilename: string;
    protected rules: Rules[];
    protected abstract getIndexCodeTemplate(): Promise<string>;
    protected abstract getFunctionCode(srcPath: string): string;
    protected abstract build(): Promise<Buffer | undefined>;
    /**
     * @param rules The router rules
     */
    constructor(rules: Rules[]);
    /**
     * Returns the array of function entries.
     * Each entry contains the name of the function and the code of function which will return the edge function.
     * @returns FunctionEntry[]
     */
    protected getFunctionEntries(): FunctionEntry[];
    /**
     * Returns the final index code with the edge functions map inserted.
     * @returns
     */
    getIndexCode(): Promise<string>;
}
