/// <reference types="node" />
import EdgeFunctionsBuilder from './EdgeFunctionsBuilder';
import { Rules } from '../../types';
/**
 * The edge functions builder for web browser environment.
 * This builder doesn't allow to use imports in edge functions.
 * This builder will insert all edge functions into prebuilt 'edgeFunctionsIndexCodeTemplate' file with sdk and edge functions.
 * The index file is then compiled to QuickJS bytecode.
 */
export default class EdgeFunctionsBrowserBuilder extends EdgeFunctionsBuilder {
    protected readFileImpl: (path: string) => string | Buffer;
    /**
     * @param rules The router rules
     * @param readFileImpl The function to read file content from filesystem. Can either be fs.readFileSync or mock function.
     */
    constructor(rules: Rules[], readFileImpl: (path: string) => string | Buffer);
    /**
     * Loads the edge function code from the specified file path,
     * finds the default export and returns the code as string which can later be inserted into edge functions map.
     * The default export is transformed to variable.
     * @example "export default function() {}" => "const defaultExport = function() {}"
     */
    protected getFunctionCode(srcPath: string): string;
    /**
     * Returns the code of prebuilt the index code template.
     * In browser environment, the index code template fetched from root path.
     */
    protected getIndexCodeTemplate(): Promise<string>;
    /**
     * Builds the edge functions and returns the compiled bytecode.
     */
    build(): Promise<Buffer | undefined>;
}
