"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCacheOptions = void 0;
const toSeconds_1 = require("./toSeconds");
/**
 * Converts caching features to CacheOptions from EdgeJs
 */
const toCacheOptions = (features) => {
    var _a, _b, _c, _d, _e, _f;
    let cacheOptions = {};
    // please check the documentation at:
    // https://docs.edgecast.com/cdn/Content/HRE/F/External-Max-Age.htm
    if ((_a = features.caching) === null || _a === void 0 ? void 0 : _a.client_max_age) {
        cacheOptions = {
            browser: {
                maxAgeSeconds: (0, toSeconds_1.toSeconds)((_b = features.caching) === null || _b === void 0 ? void 0 : _b.client_max_age),
            },
        };
    }
    if (((_c = features === null || features === void 0 ? void 0 : features.caching) === null || _c === void 0 ? void 0 : _c.service_worker_max_age) !== undefined) {
        cacheOptions = {
            browser: {
                ...cacheOptions.browser,
                serviceWorkerSeconds: (0, toSeconds_1.toSeconds)((_d = features === null || features === void 0 ? void 0 : features.caching) === null || _d === void 0 ? void 0 : _d.service_worker_max_age),
            },
        };
    }
    // https://docs.edgecast.com/cdn/Content/HRE/F/Force-Internal-Max-Age.htm
    /*
        max_age can have different cache defined based on the
        status code from the origin. Example:
  
        max_age: {
              301: '30s',
              302: '60s'
            },
            
         But for cacheOptions we take this into consideration only if there is
         status code 200.
       */
    if ((_e = features.caching) === null || _e === void 0 ? void 0 : _e.max_age) {
        const max_age = (_f = features.caching) === null || _f === void 0 ? void 0 : _f.max_age;
        if (typeof max_age === 'string' || (typeof max_age === 'object' && '200' in max_age)) {
            cacheOptions = {
                ...cacheOptions,
                edge: {
                    maxAgeSeconds: (0, toSeconds_1.toSeconds)(max_age, 200),
                },
            };
        }
    }
    return cacheOptions;
};
exports.toCacheOptions = toCacheOptions;
