"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMatchers = void 0;
const toCondition_1 = require("./converters/toCondition");
/**
 * Creates the matching conditions for EdgeControl's `if` property.
 * @param criteria
 * @returns
 */
function createMatchers(criteria) {
    var _a;
    const rules = [];
    const add = (property, value) => {
        const condition = (0, toCondition_1.toCondition)(property, value);
        rules.push(condition);
    };
    if (criteria.path) {
        add({ request: 'path' }, criteria.path);
    }
    if (criteria.scheme) {
        add({ request: 'scheme' }, criteria.scheme);
    }
    if (criteria.method) {
        add({ request: 'method' }, typeof criteria.method === 'string' ? criteria.method.toUpperCase() : criteria.method // sailfish requires uppercase method names
        );
    }
    if (criteria.headers) {
        Object.entries(criteria.headers).forEach(([name, value]) => {
            add({ 'request.header': name.toLowerCase() }, value);
        });
    }
    if (criteria.query) {
        Object.entries(criteria.query).forEach(([name, value]) => {
            // if query param, we let it pass through if the value is at least length 1, as only the existence matters
            add({ 'request.origin_query': name }, typeof value === 'string' && value.startsWith(':') ? new RegExp('.+') : value);
        });
    }
    if (criteria.cookies) {
        Object.entries(criteria.cookies).forEach(([name, value]) => {
            add({ 'request.cookie': name }, value);
        });
    }
    if (criteria.device) {
        Object.entries(criteria.device).forEach(([name, value]) => {
            add({ device: name }, value);
        });
    }
    if (criteria.location) {
        Object.entries(criteria.location).forEach(([name, value]) => {
            add({ location: name }, value);
        });
    }
    if (criteria.variable) {
        Object.entries(criteria.variable).forEach(([name, value]) => {
            add({ variable: name }, value);
        });
    }
    if (criteria.client_ip) {
        add({ request: 'client_ip' }, criteria.client_ip);
    }
    if (criteria['referring-domain']) {
        add({ request: 'referring_domain' }, criteria['referring-domain']);
    }
    if ((_a = criteria.response) === null || _a === void 0 ? void 0 : _a.status_code) {
        add({ response: 'status_code' }, criteria.response.status_code);
    }
    return rules;
}
exports.createMatchers = createMatchers;
