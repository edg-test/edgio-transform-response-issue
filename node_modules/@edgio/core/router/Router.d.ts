import { StaticOptions } from './StaticOptions';
import { Features, Matches, Rules } from '../types';
import RouteCriteria, { PathMatchValue } from './RouteCriteria';
import { FeatureCreator } from './RouteHelper';
import Response from '../runtime/Response';
import Request from '../runtime/Request';
import PropertyContext from '../runtime/PropertyContext';
import { DirOptions } from './DirOptions';
import PreloadRequests from './PreloadRequests';
import { PreloadOption } from './Preload';
/**
 * Utility function that will either rerturn features for a given route or a function that
 * accepts `RouteHelper` to define features for a given route through helper functions.
 */
export type FeaturesParam = FeatureCreator | Features;
/**
 * A function that is called on serverless to compute the response for a request.
 */
export type ComputeFn = (req: Request, res: Response, propertyContext: PropertyContext) => Promise<void>;
/**
 * The static asset manifest file name
 * @private
 */
export declare const STATIC_ASSET_MANIFEST_FILE = "static-asset-manifest.json";
/**
 * Options for configuring the router.
 */
export interface RouterOptions {
    /**
     * If `true`, the router will not add the `x-robots-tag: noindex nofollow` header to
     * requests for hosts matching Edgio's default URLs. e.g. my-site-default.layer0-limelight.link
     */
    indexPermalink?: boolean;
}
/**
 * Options for defining a route.
 */
export interface RouteOptions {
    /**
     * Adds the label for static routes
     */
    label?: string;
}
/**
 * A plugin that can be registered with a router. This is used by Edgio as plugin mechanism to
 * implement custom connectors like `@edgio/next` and `@edgio/react`.
 */
export interface RouterPlugin {
    onRegister: (router: Router) => void;
}
/**
 * The router is used to define routes and their associated features.
 */
export default class Router {
    rules: Rules[];
    routerOptions: RouterOptions;
    readonly functions: Array<ComputeFn>;
    readonly preloadRequests: PreloadRequests;
    /**
     * The contents to be written to static-asset-manifest.json, which is used to recreate
     * the paths for router.static(dir) when generating the rules for EdgeControl.
     * @private
     */
    readonly staticAssetManifest: {
        [key: string]: string[];
    };
    constructor(options?: RouterOptions);
    private addStaticAssetManifestEntry;
    /**
     * Loads and returns a router from a file that exports it with `module.exports` or `export default`.
     * @param routerPath A path to routes.js,
     */
    static load(routerPath: string): Router;
    /**
     * Defines a route that matches GET requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route.
     * @returns A self reference, suitable for chaining
     */
    get(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches POST requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    put(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches PATCH requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    patch(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches POST requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    post(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches HEAD requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    head(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches DELETE requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    delete(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route that matches OPTIONS requests.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    options(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Defines a route.
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    match(criteria: RouteCriteria | PathMatchValue, features: FeaturesParam, options?: RouteOptions): this;
    /**
     * Registers a rule that supports advanced if/then/else logic.
     * @param criteria
     * @returns A self reference, suitable for chaining
     */
    conditional(criteria: Matches): this;
    use(plugin: RouterPlugin): this;
    /**
     * Internal normalized method for adding a route.
     * @param criteria
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    private matchInternal;
    /**
     * Adds a route that matches the specific HTTP method and additional criteria.
     * @param method An HTTP method
     * @param criteria An express-style path expression, regular expression or advanced criteria object
     * @param features Features to apply when a request matches the route
     * @returns A self reference, suitable for chaining
     */
    private matchMethod;
    /**
     * Adds routes for all files in a directory tree.
     * @private
     * @param sourcePath The path to a directory containing static assets relative to the root of your project.
     * @param features A features that will be used to handle the matched files.
     * @param options
     * @returns A self-reference, suitable for chaining.
     */
    dir(sourcePath: string, features: FeaturesParam, options?: DirOptions): this;
    /**
     * Adds routes for all static assets in a directory tree.
     * @param sourcePath The path to a directory containing static assets relative to the root of your project.
     * @param options
     * @returns A self-reference, suitable for chaining.
     */
    static(sourcePath: string, options?: StaticOptions): this;
    /**
     * Since the files are now on S3, we can no longer crawl the file system to
     * determine the routes, so we use the manifest file.
     * We also prevent webpack from trying to bundle the manifest, which will fail.
     */
    private staticAssetsForPath;
    /**
     * Registers a serverless function. Returns the index of the function being registered so that it can be called
     * at runtime based on the `x-edg-fn` request header.
     * @private
     * @param fn The serverless function to store
     * @returns the index of the function being registered
     */
    addFunction(fn: ComputeFn): number;
    /**
     * Adds preload config for router
     *
     * ```js
     *  new Router().prerender(
     *    async () => [{ path: '/foo', headers: { foo: 'bar' } }],
     *    [{ path: '/bar' }]
     *  )
     * ```
     *
     * @param preloadOptions
     */
    prerender(...preloadOptions: PreloadOption[]): this;
    /**
     * Disables crawling of permalinks by setting the `x-robots-tag: noindex` response header
     * for hosts matching edgio.link or edgio-perma.link.
     *
     * ```js
     *  new Router().noIndexPermalink()
     * ```
     *   @deprecated Deprecated. Indexing permalinks is automatically disabled. Use `indexPermalink?: boolean` on Router Options to enable them.
     * * @returns {Router} A self-reference, suitable for chaining.
     */
    noIndexPermalink(): this;
    static collectFiles(sourcePath: string, options: DirOptions): string[];
    /**
     * Adds a route that matches all requests that result in an error.
     *
     * Example:
     *
     * ```js
     *  new Router()
     *    .catch(/^(4|5)\d{2}$/, {
     *      // retry all 4xx and 5xx errors using the legacy origin
     *      retry: {
     *        origin: "legacy",
     *      },
     *    });
     * ```
     *
     * @param error A regular expression, string or number that matches the status code returned by the origin
     * @param features Features to apply when a request matches the route
     * @returns A self-reference, suitable for chaining.
     */
    catch(error: RegExp | string | number, features: FeaturesParam): this;
}
