import Config from '../config';
import Router from '../router/Router';
import PropertyContext from './PropertyContext';
import { Origins } from '../types';
import LambdaResponse from './LambdaResponse';
import LambdaRequest from './LambdaRequest';
export default class RequestHandler {
    basedir: string;
    injectOrigins: Origins[];
    private cache?;
    private router?;
    private propertyContext?;
    private config;
    constructor(basedir: string, injectOrigins?: Origins[]);
    reload(router?: Router, propertyContext?: PropertyContext): Router;
    withOrigins(config: Config): {
        origins: Origins[];
        routes?: string | undefined;
        staticAssets?: import("../config").StaticAssetEntry[] | undefined;
        serverless?: import("../config").ServerlessConfig | undefined;
        sources?: string[] | undefined;
        connector?: string | undefined;
        environments?: {
            [name: string]: import("../types").Property;
        } | undefined;
        interpolationValues?: import("../config").InterpolationValues | undefined;
        prerenderConcurrency?: number | undefined;
        customConnector?: import("../config").CustomConnectorConfig | undefined;
        name: string;
        hostnames?: [import("../types").Hostnames, ...import("../types").Hostnames[]] | undefined;
        rules?: import("../types").Rules[] | undefined;
        edge_functions?: import("../types").EdgeFunctions | undefined;
    };
    handle(request: LambdaRequest, response: LambdaResponse): Promise<void>;
    private createRequestContext;
    /**
     * Simulates the Sailfish front end behavior of following redirects.
     * This is needed to implement retry.
     * @param request
     * @param response
     */
    private handleRedirects;
    createEdgeConfig(): string;
    createPreloadConfig(): Promise<import("../router/Preload").PreloadConfig>;
}
