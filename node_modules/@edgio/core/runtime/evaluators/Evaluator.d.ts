/**
 * Common interface for all Evaluators and EvaluatorGroup
 */
export interface IEvaluator {
    /**
     * Evaluates the provided input expression
     * @param input expression
     * @param values object with extracted values from the request
     * @returns string on success and undefined in other cases
     */
    execute(input: string, values: Record<string, string>): string | undefined;
}
export type EvaluatorActionParams = {
    /**
     * Object with extracted values from the request
     */
    values: Record<string, string>;
    /**
     * Parts of the input matched by Evaluator's match regex
     */
    matched: string[];
};
/**
 * Represents the action which is preformed by evaluator when expression is matched
 */
export type EvaluatorAction = (params: EvaluatorActionParams) => string | undefined;
/**
 * Evaluator represents certain action
 * which is defined by string expression
 *
 * For example: "%{valueName/seachPattern/replaceValue}" => "content of the value with replaceValue"
 */
export declare class Evaluator implements IEvaluator {
    protected action: EvaluatorAction;
    protected matcher: RegExp;
    /**
     * @param action Action which is performed when input matches the regex matcher
     * @param matcher Regex condition which input expression must satisfy
     */
    constructor(action: EvaluatorAction, matcher: RegExp);
    /**
     * Evaluates the provided string expression and perform provided action
     * when it satisfies evaluator's matcher format
     *
     * @param input expression
     * @param values object with extracted values from the request
     * @returns string on success and undefined in other cases
     */
    execute(input: string, values: Record<string, string>): string | undefined;
}
